from llm_advisory.llm_advisor import LLMAdvisor
from llm_advisory.pydantic_models import (
    LLMAdvisorDataArtefact,
    LLMAdvisorAdvise,
    LLMAdvisorState,
    LLMAdvisorUpdateStateData,
)
from llm_advisory.helper.llm_prompt import compile_data_artefacts


ADVISOR_INSTRUCTIONS = "You are the last advisor who creates an advice based on the signals of other advisors."
ADVISOR_PROMPT = "Create your advise based on the signals below:"


class AdvisoryAdvisor(LLMAdvisor):
    """State advisor for advisory"""

    signal_model_type = LLMAdvisorAdvise
    advisor_instructions = ADVISOR_INSTRUCTIONS
    advisor_prompt = ADVISOR_PROMPT

    def update_state(
        self, state: LLMAdvisorUpdateStateData
    ) -> LLMAdvisorUpdateStateData:
        self.advisor_messages_input.advisor_data = compile_data_artefacts(
            self._get_signal_data(state)
        )
        return super()._update_state(state)

    def _get_signal_data(self, state: LLMAdvisorState) -> LLMAdvisorDataArtefact:
        signals = []
        for advisor_name, signal in state.signals.items():
            signals.append(
                {
                    "name": advisor_name,
                    "signal": signal.signal,
                    "confidence": signal.confidence,
                    "reasoning": signal.reasoning,
                }
            )
        return LLMAdvisorDataArtefact(
            description="The signals in the json data below are generated by the advisors",
            artefact=signals,
        )
